// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CampaignCreator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CampaignCreator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CampaignCreator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CampaignCreator", id.toString(), this);
    }
  }

  static load(id: string): CampaignCreator | null {
    return changetype<CampaignCreator | null>(store.get("CampaignCreator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdCampaigns(): Array<string> | null {
    let value = this.get("createdCampaigns");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set createdCampaigns(value: Array<string> | null) {
    if (!value) {
      this.unset("createdCampaigns");
    } else {
      this.set("createdCampaigns", Value.fromStringArray(<Array<string>>value));
    }
  }

  get fundingGiven(): BigInt | null {
    let value = this.get("fundingGiven");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingGiven(value: BigInt | null) {
    if (!value) {
      this.unset("fundingGiven");
    } else {
      this.set("fundingGiven", Value.fromBigInt(<BigInt>value));
    }
  }

  get fundingWithdrawn(): BigInt | null {
    let value = this.get("fundingWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("fundingWithdrawn");
    } else {
      this.set("fundingWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Campaign entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Campaign must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Campaign", id.toString(), this);
    }
  }

  static load(id: string): Campaign | null {
    return changetype<Campaign | null>(store.get("Campaign", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaignCID(): string {
    let value = this.get("campaignCID");
    return value!.toString();
  }

  set campaignCID(value: string) {
    this.set("campaignCID", Value.fromString(value));
  }

  get details(): string | null {
    let value = this.get("details");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set details(value: string | null) {
    if (!value) {
      this.unset("details");
    } else {
      this.set("details", Value.fromString(<string>value));
    }
  }

  get milestone(): Array<string> | null {
    let value = this.get("milestone");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set milestone(value: Array<string> | null) {
    if (!value) {
      this.unset("milestone");
    } else {
      this.set("milestone", Value.fromStringArray(<Array<string>>value));
    }
  }

  get currentMilestone(): string | null {
    let value = this.get("currentMilestone");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentMilestone(value: string | null) {
    if (!value) {
      this.unset("currentMilestone");
    } else {
      this.set("currentMilestone", Value.fromString(<string>value));
    }
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get campaignRunning(): boolean {
    let value = this.get("campaignRunning");
    return value!.toBoolean();
  }

  set campaignRunning(value: boolean) {
    this.set("campaignRunning", Value.fromBoolean(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get amountSought(): BigInt {
    let value = this.get("amountSought");
    return value!.toBigInt();
  }

  set amountSought(value: BigInt) {
    this.set("amountSought", Value.fromBigInt(value));
  }

  get donors(): Array<string> | null {
    let value = this.get("donors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set donors(value: Array<string> | null) {
    if (!value) {
      this.unset("donors");
    } else {
      this.set("donors", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Milestone extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Milestone entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Milestone must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Milestone", id.toString(), this);
    }
  }

  static load(id: string): Milestone | null {
    return changetype<Milestone | null>(store.get("Milestone", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get milestoneCID(): string {
    let value = this.get("milestoneCID");
    return value!.toString();
  }

  set milestoneCID(value: string) {
    this.set("milestoneCID", Value.fromString(value));
  }

  get details(): string | null {
    let value = this.get("details");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set details(value: string | null) {
    if (!value) {
      this.unset("details");
    } else {
      this.set("details", Value.fromString(<string>value));
    }
  }

  get campaign(): string {
    let value = this.get("campaign");
    return value!.toString();
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get milestonestatus(): string {
    let value = this.get("milestonestatus");
    return value!.toString();
  }

  set milestonestatus(value: string) {
    this.set("milestonestatus", Value.fromString(value));
  }

  get periodToVote(): BigInt {
    let value = this.get("periodToVote");
    return value!.toBigInt();
  }

  set periodToVote(value: BigInt) {
    this.set("periodToVote", Value.fromBigInt(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }
}

export class Donors extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Donors entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Donors must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Donors", id.toString(), this);
    }
  }

  static load(id: string): Donors | null {
    return changetype<Donors | null>(store.get("Donors", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    return value!.toString();
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get donorAddress(): Bytes {
    let value = this.get("donorAddress");
    return value!.toBytes();
  }

  set donorAddress(value: Bytes) {
    this.set("donorAddress", Value.fromBytes(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }
}
